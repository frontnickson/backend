const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://admin:password123@localhost:27018/toolrole_db?authSource=admin');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const User = require('./src/models/User');
const Board = require('./src/models/Board');
const Task = require('./src/models/Task');
const Profession = require('./src/models/Profession');
const ProfessionTask = require('./src/models/ProfessionTask');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const setupPremiumUser = async () => {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ email: 'premium2@test.com' });
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å premium2@test.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–æ Premium
    user.subscription = {
      type: 'premium',
      status: 'active',
      startDate: new Date(),
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
      autoRenew: true,
      features: ['unlimited_tasks', 'premium_tasks']
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á
    user.taskSettings = {
      dailyTaskLimit: 3,
      taskDifficulty: 'beginner',
      taskCategories: ['social_media', 'print_design', 'web_design'],
      completedTasksCount: 0,
      streakDays: 0
    };
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä"
    const profession = await Profession.findOne({ slug: 'graphic-designer' });
    if (!profession) {
      console.log('‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.selectedProfession = {
      professionId: profession._id,
      professionSlug: profession.slug,
      professionName: profession.name,
      isActive: true,
      selectedAt: new Date()
    };
    
    await user.save();
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ Premium, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä"
    const existingBoard = await Board.findOne({ 
      ownerId: user._id, 
      title: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä' 
    });
    
    if (existingBoard) {
      console.log('üìã –î–æ—Å–∫–∞ "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º...');
      await Board.deleteOne({ _id: existingBoard._id });
      await Task.deleteMany({ boardId: existingBoard._id });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
    // –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ members –∏ columns
    const board = new Board({
      title: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä',
      description: '–î–æ—Å–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –ø–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º—É –¥–∏–∑–∞–π–Ω—É',
      icon: 'üé®',
      color: '#8B5CF6',
      ownerId: user._id,
      members: [],
      columns: [],
      settings: {
        allowMembersToInvite: true,
        allowMembersToCreateTasks: true,
        allowMembersToEditTasks: true,
        allowMembersToDeleteTasks: false,
        allowMembersToManageColumns: false,
        allowMembersToManageBoard: false
      },
      isActive: true,
      isPublic: false
    });
    
    await board.save();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    board.members.push({
      id: user._id,
      userId: user._id,
      boardId: board._id,
      role: 'owner',
      permissions: [{
        id: 'read_board',
        name: '–ß—Ç–µ–Ω–∏–µ –¥–æ—Å–∫–∏',
        description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å–∫–∏ –∏ –∑–∞–¥–∞—á',
        resource: 'board',
        action: 'read'
      }, {
        id: 'write_board',
        name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏',
        description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –∏ –∑–∞–¥–∞—á',
        resource: 'board',
        action: 'update'
      }, {
        id: 'admin_board',
        name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–æ–π',
        description: '–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–æ–π',
        resource: 'board',
        action: 'manage'
      }],
      joinedAt: Date.now()
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    board.columns.push({
      id: 'new_tasks',
      boardId: board._id,
      title: '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏',
      description: '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å',
      color: '#3B82F6',
      order: 0,
      isStandard: true
    }, {
      id: 'in_progress',
      boardId: board._id,
      title: '–í —Ä–∞–±–æ—Ç–µ',
      description: '–ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
      color: '#F59E0B',
      order: 1,
      isStandard: true
    }, {
      id: 'review',
      boardId: board._id,
      title: '–ü—Ä–æ–≤–µ—Ä–∫–∞',
      description: '–ó–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
      color: '#8B5CF6',
      order: 2,
      isStandard: true
    }, {
      id: 'completed',
      boardId: board._id,
      title: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      color: '#10B981',
      order: 3,
      isStandard: true
    });
    
    await board.save();
    
    console.log('‚úÖ –î–æ—Å–∫–∞ "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä" —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏
    const professionTasks = await ProfessionTask.find({ 
      professionId: profession._id 
    }).limit(5);
    
    if (professionTasks.length > 0) {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º ${professionTasks.length} –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å–∫–∏...`);
      
      for (let i = 0; i < professionTasks.length; i++) {
        const profTask = professionTasks[i];
        const task = new Task({
          title: profTask.title,
          description: profTask.description,
          boardId: board._id,
          columnId: board.columns[0].id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∫–æ–ª–æ–Ω–∫–∏
          assigneeId: user._id,
          reporterId: user._id,
          priority: profTask.priority || 'medium',
          type: 'task',
          status: 'planning',
          order: i,
          dueDate: Date.now() + (i + 1) * 24 * 60 * 60 * 1000, // +1, +2, +3 –¥–Ω—è
          estimatedHours: profTask.estimatedTime ? profTask.estimatedTime / 60 : 1,
          tags: profTask.tags ? profTask.tags.map(tag => ({
            id: tag.toLowerCase().replace(/\s+/g, '_'),
            name: tag,
            color: '#8B5CF6',
            createdBy: user._id
          })) : [{
            id: 'graphic_design',
            name: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
            color: '#8B5CF6',
            createdBy: user._id
          }],
          isActive: true,
          createdBy: user._id,
          updatedBy: user._id,
          metadata: {
            professionTaskId: profTask._id,
            professionId: profession._id,
            professionSlug: profession.slug
          }
        });
        
        await task.save();
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${i + 1} —Å–æ–∑–¥–∞–Ω–∞: ${task.title}`);
      }
    }
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìß Email: premium2@test.com');
    console.log('üîë –ü–∞—Ä–æ–ª—å: premium12345');
    console.log('üíé –ü–æ–¥–ø–∏—Å–∫–∞: Premium (3 –∑–∞–¥–∞—á–∏ –≤ –¥–µ–Ω—å)');
    console.log('üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä');
    console.log('üìã –î–æ—Å–∫–∞: –°–æ–∑–¥–∞–Ω–∞ —Å –∑–∞–¥–∞—á–∞–º–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    await connectDB();
    await setupPremiumUser();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
