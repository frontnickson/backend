const mongoose = require('mongoose');
const config = require('./index');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(config.mongodb.uri, config.mongodb.options);
    
    console.log(`‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: ${conn.connection.host}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mongoose.connection.on('connected', () => {
      console.log('üîó Mongoose –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
    });
    
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Mongoose:', err);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.log('üîå Mongoose –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç MongoDB');
    });
    
    // Graceful shutdown
    process.on('SIGINT', async () => {
      try {
        await mongoose.connection.close();
        console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ app termination');
        process.exit(0);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
        process.exit(1);
      }
    });
    
    process.on('SIGTERM', async () => {
      try {
        await mongoose.connection.close();
        console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ app termination');
        process.exit(0);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err);
        process.exit(1);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
    process.exit(1);
  }
};

module.exports = connectDB;
