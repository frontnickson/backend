const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const config = require('../config');
const User = require('../models/User');
const { getRedisClient } = require('../config/redis');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (userId) => {
  return jwt.sign({ userId }, config.jwt.secret, {
    expiresIn: config.jwt.expiresIn
  });
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–∞
const generateRefreshToken = (userId) => {
  return jwt.sign({ userId }, config.jwt.refreshSecret, {
    expiresIn: config.jwt.refreshExpiresIn
  });
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Redis
const saveTokenToRedis = async (token, userId, expiresIn) => {
  try {
    const redisClient = getRedisClient();
    const key = `user_token:${userId}`;
    await redisClient.setEx(key, expiresIn, token);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ Redis:', error);
  }
};

// –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞
const revokeToken = async (token) => {
  try {
    const redisClient = getRedisClient();
    const key = `revoked_token:${token}`;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ 24 —á–∞—Å–∞
    await redisClient.setEx(key, 86400, 'revoked');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email
 * POST /api/v1/auth/check-email
 */
const checkEmailExists = async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ email:', req.body);
    const { email } = req.body;

    if (!email) {
      console.log('‚ùå Email –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return res.status(400).json({
        success: false,
        error: {
          message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          type: 'MISSING_EMAIL',
          statusCode: 400
        }
      });
    }

    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email.toLowerCase());
    const existingUser = await User.findOne({ email: email.toLowerCase() });
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', existingUser ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    res.status(200).json({
      success: true,
      data: {
        exists: !!existingUser,
        email: email.toLowerCase()
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email',
        type: 'CHECK_EMAIL_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è username
 * POST /api/v1/auth/check-username
 */
const checkUsernameExists = async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ username:', req.body);
    const { username } = req.body;

    if (!username) {
      console.log('‚ùå Username –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return res.status(400).json({
        success: false,
        error: {
          message: 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          type: 'MISSING_USERNAME',
          statusCode: 400
        }
      });
    }

    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username:', username.toLowerCase());
    const existingUser = await User.findOne({ username: username.toLowerCase() });
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', existingUser ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    res.status(200).json({
      success: true,
      data: {
        exists: !!existingUser,
        username: username.toLowerCase()
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username',
        type: 'CHECK_USERNAME_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * POST /api/v1/auth/register
 */
const register = async (req, res) => {
  try {
    console.log('üîê register: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
    console.log('üîê register: Body:', req.body);
    console.log('üîê register: Headers:', req.headers);
    
    const {
      email,
      username,
      password,
      first_name,
      last_name,
      middle_name,
      gender,
      birth_date,
      full_name,
      bio,
      avatar_url,
      phone_number,
      country,
      city,
      timezone,
      theme,
      language,
      email_notifications,
      push_notifications,
      desktop_notifications,
      profile_visibility,
      show_online_status,
      allow_friend_requests,
      interests,
      skills,
      education,
      occupation,
      profession,
      company,
      website,
      social_links,
      offer_accepted,
      offer_accepted_at
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username
    const existingUser = await User.findOne({
      $or: [
        { email: email.toLowerCase() },
        { username: username.toLowerCase() }
      ]
    });

    if (existingUser) {
      return res.status(400).json({
        success: false,
        error: {
          message: existingUser.email === email.toLowerCase() 
            ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          type: 'USER_EXISTS',
          statusCode: 400
        }
      });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      email: email.toLowerCase(),
      username: username.toLowerCase(),
      password,
      firstName: first_name || username,
      lastName: last_name || username,
      middleName: middle_name,
      gender,
      birthDate: birth_date,
      fullName: full_name,
      bio,
      avatarUrl: avatar_url,
      phoneNumber: phone_number,
      country,
      city,
      timezone,
      theme: theme || 'light',
      language: language || 'ru',
      emailNotifications: email_notifications !== undefined ? email_notifications : true,
      pushNotifications: push_notifications !== undefined ? push_notifications : true,
      desktopNotifications: desktop_notifications !== undefined ? desktop_notifications : true,
      profileVisibility: profile_visibility || 'public',
      showOnlineStatus: show_online_status !== undefined ? show_online_status : true,
      allowFriendRequests: allow_friend_requests !== undefined ? allow_friend_requests : true,
      interests: interests || [],
      skills: skills || [],
      education,
      occupation,
      profession,
      company,
      website,
      socialLinks: social_links || {},
      offerAccepted: offer_accepted || false,
      offerAcceptedAt: offer_accepted_at ? new Date(offer_accepted_at) : new Date(),
      offerVersion: '1.0'
    };

    const user = new User(userData);
    await user.save();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const accessToken = generateToken(user._id);
    const refreshToken = generateRefreshToken(user._id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis
    const tokenExpiresIn = parseInt(config.jwt.expiresIn.replace('d', '')) * 24 * 60 * 60; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    await saveTokenToRedis(accessToken, user._id, tokenExpiresIn);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤
    user.loginCount += 1;
    user.lastLogin = new Date();
    user.isOnline = true;
    await user.save();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const userResponse = user.toPublicProfile();

    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      data: {
        user: userResponse,
        access_token: accessToken,
        token_type: 'Bearer',
        expires_in: tokenExpiresIn,
        refresh_token: refreshToken
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: {
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          type: 'VALIDATION_ERROR',
          statusCode: 400,
          details: Object.values(error.errors).map(err => err.message)
        }
      });
    }

    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        type: 'REGISTRATION_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
 * POST /api/v1/auth/login-email
 */
const login = async (req, res) => {
  try {
    console.log('üîê login: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥');
    console.log('üîê login: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: {
          message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
          type: 'MISSING_CREDENTIALS',
          statusCode: 400
        }
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email.toLowerCase());
    const user = await User.findOne({ email: email.toLowerCase() }).select('+password');
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', user ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({
        success: false,
        error: {
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
          type: 'INVALID_CREDENTIALS',
          statusCode: 401
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    console.log('üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...');
    const isPasswordValid = await user.comparePassword(password);
    console.log('üîë –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', isPasswordValid ? '–ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π' : '–ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');
    
    if (!isPasswordValid) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');
      return res.status(401).json({
        success: false,
        error: {
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
          type: 'INVALID_CREDENTIALS',
          statusCode: 401
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if (!user.isActive) {
      return res.status(401).json({
        success: false,
        error: {
          message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
          type: 'ACCOUNT_BLOCKED',
          statusCode: 401
        }
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const accessToken = generateToken(user._id);
    const refreshToken = generateRefreshToken(user._id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ Redis
    const tokenExpiresIn = parseInt(config.jwt.expiresIn.replace('d', '')) * 24 * 60 * 60; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    await saveTokenToRedis(accessToken, user._id, tokenExpiresIn);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å
    user.loginCount += 1;
    user.lastLogin = new Date();
    user.isOnline = true;
    user.lastSeen = new Date();
    await user.save();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const userResponse = user.toPublicProfile();

    res.status(200).json({
      success: true,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: {
        user: userResponse,
        access_token: accessToken,
        token_type: 'Bearer',
        expires_in: tokenExpiresIn,
        refresh_token: refreshToken
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    
    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
        type: 'LOGIN_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 * POST /api/v1/auth/logout
 */
const logout = async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    
    if (token) {
      // –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
      await revokeToken(token);
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Redis
      try {
        const redisClient = getRedisClient();
        const key = `user_token:${req.user.id}`;
        await redisClient.del(key);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ Redis:', error);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (req.user) {
      req.user.isOnline = false;
      req.user.lastSeen = new Date();
      await req.user.save();
    }

    res.status(200).json({
      success: true,
      message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: null
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    
    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
        type: 'LOGOUT_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 * POST /api/v1/auth/refresh
 */
const refreshToken = async (req, res) => {
  try {
    const { refresh_token } = req.body;

    if (!refresh_token) {
      return res.status(400).json({
        success: false,
        error: {
          message: 'Refresh —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          type: 'MISSING_REFRESH_TOKEN',
          statusCode: 400
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(refresh_token, config.jwt.refreshSecret);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findById(decoded.userId).select('-password');
    
    if (!user || !user.isActive) {
      return res.status(401).json({
        success: false,
        error: {
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω',
          type: 'USER_NOT_FOUND',
          statusCode: 401
        }
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const newAccessToken = generateToken(user._id);
    const newRefreshToken = generateRefreshToken(user._id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ Redis
    const tokenExpiresIn = parseInt(config.jwt.expiresIn.replace('d', '')) * 24 * 60 * 60;
    await saveTokenToRedis(newAccessToken, user._id, tokenExpiresIn);

    // –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
    await revokeToken(refresh_token);

    res.status(200).json({
      success: true,
      message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: {
        access_token: newAccessToken,
        token_type: 'Bearer',
        expires_in: tokenExpiresIn,
        refresh_token: newRefreshToken
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({
        success: false,
        error: {
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω',
          type: 'INVALID_REFRESH_TOKEN',
          statusCode: 401
        }
      });
    }

    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        error: {
          message: 'Refresh —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫',
          type: 'REFRESH_TOKEN_EXPIRED',
          statusCode: 401
        }
      });
    }

    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞',
        type: 'REFRESH_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/v1/auth/me
 */
const getCurrentUser = async (req, res) => {
  try {
    const user = await User.findById(req.user.id)
      .select('-password');
      // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º populate –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
      // .populate('friends', 'id username firstName lastName avatarUrl')
      // .populate('teams', 'id name description avatar')
      // .populate('notifications', 'id type message isRead createdAt');

    if (!user) {
      return res.status(404).json({
        success: false,
        error: {
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          type: 'USER_NOT_FOUND',
          statusCode: 404
        }
      });
    }

    res.status(200).json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      data: user
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        type: 'GET_USER_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
 * POST /api/v1/auth/change-password
 */
const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        success: false,
        error: {
          message: '–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
          type: 'MISSING_PASSWORDS',
          statusCode: 400
        }
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
    const user = await User.findById(req.user.id).select('+password');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const isCurrentPasswordValid = await user.comparePassword(currentPassword);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        success: false,
        error: {
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
          type: 'INVALID_CURRENT_PASSWORD',
          statusCode: 400
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    user.password = newPassword;
    await user.save();

    res.status(200).json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      data: null
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: {
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è',
          type: 'PASSWORD_VALIDATION_ERROR',
          statusCode: 400,
          details: Object.values(error.errors).map(err => err.message)
        }
      });
    }

    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è',
        type: 'CHANGE_PASSWORD_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
 * POST /api/v1/auth/forgot-password
 */
const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        success: false,
        error: {
          message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
          type: 'MISSING_EMAIL',
          statusCode: 400
        }
      });
    }

    const user = await User.findOne({ email: email.toLowerCase() });

    if (!user) {
      // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      return res.status(200).json({
        success: true,
        message: '–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email',
        data: null
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    const resetToken = crypto.randomBytes(32).toString('hex');
    const resetTokenExpiry = Date.now() + 3600000; // 1 —á–∞—Å

    user.passwordResetToken = resetToken;
    user.passwordResetExpires = resetTokenExpiry;
    await user.save();

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è
    console.log(`üîë –¢–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${resetToken}`);

    res.status(200).json({
      success: true,
      message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email',
      data: null
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
    
    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
        type: 'FORGOT_PASSWORD_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
 * POST /api/v1/auth/reset-password
 */
const resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;

    if (!token || !newPassword) {
      return res.status(400).json({
        success: false,
        error: {
          message: '–¢–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
          type: 'MISSING_TOKEN_OR_PASSWORD',
          statusCode: 400
        }
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
    const user = await User.findOne({
      passwordResetToken: token,
      passwordResetExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        error: {
          message: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫',
          type: 'INVALID_OR_EXPIRED_TOKEN',
          statusCode: 400
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    user.password = newPassword;
    user.passwordResetToken = undefined;
    user.passwordResetExpires = undefined;
    await user.save();

    res.status(200).json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
      data: null
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
    
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        error: {
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è',
          type: 'PASSWORD_VALIDATION_ERROR',
          statusCode: 400,
          details: Object.values(error.errors).map(err => err.message)
        }
      });
    }

    res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è',
        type: 'RESET_PASSWORD_ERROR',
        statusCode: 500
      }
    });
  }
};

module.exports = {
  register,
  login,
  logout,
  refreshToken,
  getCurrentUser,
  changePassword,
  forgotPassword,
  resetPassword,
  checkEmailExists,
  checkUsernameExists
};
