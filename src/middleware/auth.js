const jwt = require('jsonwebtoken');
const config = require('../config');
const User = require('../models/User');
const { getRedisClient } = require('../config/redis');

console.log('üîê Middleware auth.js –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('üîê Middleware auth.js: jwt:', typeof jwt);
console.log('üîê Middleware auth.js: config:', typeof config);
console.log('üîê Middleware auth.js: User:', typeof User);
console.log('üîê Middleware auth.js: getRedisClient:', typeof getRedisClient);

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
 */
const authenticate = async (req, res, next) => {
  console.log('üîê Middleware authenticate: ========== –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê! ==========');
  console.log('üîê Middleware authenticate: –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞:', new Date().toISOString());
  console.log('üîê Middleware authenticate: –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', req.method);
  console.log('üîê Middleware authenticate: URL:', req.url);
  
  try {
    console.log('üîê Middleware authenticate: ========== –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò ==========');
    console.log('üîê Middleware authenticate: –∑–∞–≥–æ–ª–æ–≤–∫–∏:', JSON.stringify(req.headers, null, 2));
    console.log('üîê Middleware authenticate: cookies:', JSON.stringify(req.cookies, null, 2));
    let token;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
      console.log('üîê Middleware authenticate: —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ');
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookies
    else if (req.cookies && req.cookies.token) {
      token = req.cookies.token;
      console.log('üîê Middleware authenticate: —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ cookies');
    }

    if (!token) {
      console.log('üîê Middleware authenticate: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({
        success: false,
        error: {
          message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
          type: 'NO_TOKEN',
          statusCode: 401
        }
      });
    }

    try {
      console.log('üîê Middleware authenticate: –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω');
      console.log('üîê Middleware authenticate: —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', token);
      console.log('üîê Middleware authenticate: JWT —Å–µ–∫—Ä–µ—Ç:', config.jwt.secret);
      console.log('üîê Middleware authenticate: config.jwt:', JSON.stringify(config.jwt, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      const decoded = jwt.verify(token, config.jwt.secret);
      console.log('üîê Middleware authenticate: JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', decoded);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–∑–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω –≤ Redis
      console.log('üîê Middleware authenticate: ========== –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò REDIS ==========');
      console.log('üîê Middleware authenticate: —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis:', token.substring(0, 50) + '...');
      console.log('üîê Middleware authenticate: –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', token.length);
      
      try {
        console.log('üîê Middleware authenticate: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Redis –∫–ª–∏–µ–Ω—Ç...');
        const redisClient = getRedisClient();
        console.log('üîê Middleware authenticate: Redis –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω:', typeof redisClient);
        console.log('üîê Middleware authenticate: Redis –∫–ª–∏–µ–Ω—Ç:', redisClient ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        if (!redisClient) {
          console.log('üîê Middleware authenticate: Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        } else {
          console.log('üîê Middleware authenticate: –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ Redis...');
          const redisKey = `revoked_token:${token}`;
          console.log('üîê Middleware authenticate: Redis –∫–ª—é—á:', redisKey.substring(0, 50) + '...');
          
          const isTokenRevoked = await redisClient.get(redisKey);
          console.log('üîê Middleware authenticate: —Ä–µ–∑—É–ª—å—Ç–∞—Ç Redis get():', isTokenRevoked);
          console.log('üîê Middleware authenticate: —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Redis:', typeof isTokenRevoked);
          
          if (isTokenRevoked) {
            console.log('üîê Middleware authenticate: üö® –¢–û–ö–ï–ù –û–¢–û–ó–í–ê–ù –í REDIS!');
            return res.status(401).json({
              success: false,
              error: {
                message: '–¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω',
                type: 'TOKEN_REVOKED',
                statusCode: 401
              }
            });
          }
          console.log('üîê Middleware authenticate: ‚úÖ —Ç–æ–∫–µ–Ω –ù–ï –æ—Ç–æ–∑–≤–∞–Ω –≤ Redis, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º');
        }
      } catch (redisError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', redisError);
        console.error('‚ùå Stack trace Redis –æ—à–∏–±–∫–∏:', redisError.stack);
        console.log('üîê Middleware authenticate: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
      }
      
      console.log('üîê Middleware authenticate: ========== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò REDIS ==========');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
       console.log('üîê Middleware authenticate: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, ID:', decoded.userId);
      console.log('üîê Middleware authenticate: mongoose connection state:', require('mongoose').connection.readyState);
      console.log('üîê Middleware authenticate: User model:', typeof User);
      console.log('üîê Middleware authenticate: User.findById:', typeof User.findById);
      
      const user = await User.findById(decoded.userId)
        .select('-password');
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º populate –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
        // .populate('friends', 'id username firstName lastName avatarUrl')
        // .populate('teams', 'id name description avatar')
        // .populate('notifications', 'id type message isRead createdAt');

      if (!user) {
        console.log('üîê Middleware authenticate: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
        return res.status(401).json({
          success: false,
          error: {
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            type: 'USER_NOT_FOUND',
            statusCode: 401
          }
        });
      }
      
      console.log('üîê Middleware authenticate: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', user.username);

      console.log('üîê Middleware authenticate: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      if (!user.isActive) {
        console.log('üîê Middleware authenticate: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        return res.status(401).json({
          success: false,
          error: {
            message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            type: 'ACCOUNT_BLOCKED',
            statusCode: 401
          }
        });
      }

      console.log('üîê Middleware authenticate: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ request');
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request
      req.user = user;
      
      console.log('üîê Middleware authenticate: –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è');
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
      user.lastSeen = new Date();
      user.isOnline = true;
      await user.save();
      console.log('üîê Middleware authenticate: –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º next()');
      console.log('üîê Middleware authenticate: ========== –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û ==========');

      next();
    } catch (jwtError) {
      console.log('üîê Middleware authenticate: ========== JWT –û–®–ò–ë–ö–ê ==========');
      console.log('üîê Middleware authenticate: JWT –æ—à–∏–±–∫–∞:', jwtError.name, jwtError.message);
      console.log('üîê Middleware authenticate: JWT stack:', jwtError.stack);
      
      if (jwtError.name === 'TokenExpiredError') {
        console.log('üîê Middleware authenticate: —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
        return res.status(401).json({
          success: false,
          error: {
            message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫',
            type: 'TOKEN_EXPIRED',
            statusCode: 401
          }
        });
      }
      
      console.log('üîê Middleware authenticate: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
      return res.status(401).json({
        success: false,
        error: {
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω',
          type: 'INVALID_TOKEN',
          statusCode: 401
        }
      });
    }
  } catch (error) {
    console.log('üîê Middleware authenticate: ========== –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê ==========');
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ stack:', error.stack);
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ name:', error.name);
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ message:', error.message);
    return res.status(500).json({
      success: false,
      error: {
        message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        type: 'AUTH_ERROR',
        statusCode: 500
      }
    });
  }
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const authorize = (...roles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: {
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
          type: 'NOT_AUTHENTICATED',
          statusCode: 401
        }
      });
    }

    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        error: {
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
          type: 'INSUFFICIENT_PERMISSIONS',
          statusCode: 403
        }
      });
    }

    next();
  };
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Å—É—Ä—Å–∞
 */
const checkOwnership = (resourceModel, resourceIdField = 'id') => {
  return async (req, res, next) => {
    try {
      const resourceId = req.params[resourceIdField];
      const resource = await resourceModel.findById(resourceId);

      if (!resource) {
        return res.status(404).json({
          success: false,
          error: {
            message: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            type: 'RESOURCE_NOT_FOUND',
            statusCode: 404
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (resource.ownerId?.toString() !== req.user.id.toString() && 
          req.user.role !== 'admin' && 
          req.user.role !== 'superuser') {
        return res.status(403).json({
          success: false,
          error: {
            message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ä–µ—Å—É—Ä—Å–∞',
            type: 'ACCESS_DENIED',
            statusCode: 403
          }
        });
      }

      req.resource = resource;
      next();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', error);
      return res.status(500).json({
        success: false,
        error: {
          message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
          type: 'OWNERSHIP_CHECK_ERROR',
          statusCode: 500
        }
      });
    }
  };
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ
 */
const checkTeamMembership = (teamIdField = 'teamId') => {
  return async (req, res, next) => {
    try {
      const teamId = req.params[teamIdField] || req.body[teamIdField];
      
      if (!teamId) {
        return res.status(400).json({
          success: false,
          error: {
            message: 'ID –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω',
            type: 'TEAM_ID_MISSING',
            statusCode: 400
          }
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã
      const isMember = req.user.teams.some(team => 
        team.id.toString() === teamId.toString()
      );

      if (!isMember && req.user.role !== 'admin' && req.user.role !== 'superuser') {
        return res.status(403).json({
          success: false,
          error: {
            message: '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã',
            type: 'NOT_TEAM_MEMBER',
            statusCode: 403
          }
        });
      }

      next();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ:', error);
      return res.status(500).json({
        success: false,
        error: {
          message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ',
          type: 'TEAM_MEMBERSHIP_CHECK_ERROR',
          statusCode: 500
        }
      });
    }
  };
};

module.exports = {
  authenticate,
  authorize,
  checkOwnership,
  checkTeamMembership
};
