const express = require('express');
const router = express.Router();
const User = require('../models/User');
const { authenticate: auth } = require('../middleware/auth');
const schedulerService = require('../services/schedulerService');
const TaskAssignmentService = require('../services/taskAssignmentService');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const requireAdmin = (req, res, next) => {
  if (req.user.role !== 'admin' && req.user.role !== 'superuser') {
    return res.status(403).json({
      success: false,
      message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏'
    });
  }
  next();
};

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
router.post('/assign-tasks-now', auth, requireAdmin, async (req, res) => {
  try {
    console.log('üöÄ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
    const result = await schedulerService.runTaskAssignmentNow();
    
    res.json({
      success: true,
      message: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–æ',
      data: result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
router.post('/check-completed-tasks-now', auth, requireAdmin, async (req, res) => {
  try {
    console.log('üöÄ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
    await schedulerService.runCompletedTasksCheckNow();
    
    res.json({
      success: true,
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
router.get('/scheduler-status', auth, requireAdmin, (req, res) => {
  try {
    const status = schedulerService.getStatus();
    
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/premium-users-stats', auth, requireAdmin, async (req, res) => {
  try {
    const stats = await User.aggregate([
      {
        $match: {
          'subscription.type': { $ne: 'free' },
          'subscription.status': 'active'
        }
      },
      {
        $group: {
          _id: '$subscription.type',
          count: { $sum: 1 },
          avgCompletedTasks: { $avg: '$taskSettings.completedTasksCount' },
          avgStreakDays: { $avg: '$taskSettings.streakDays' }
        }
      }
    ]);

    const totalPremiumUsers = await User.countDocuments({
      'subscription.type': { $ne: 'free' },
      'subscription.status': 'active'
    });

    const usersWithSelectedProfession = await User.countDocuments({
      'subscription.type': { $ne: 'free' },
      'subscription.status': 'active',
      'selectedProfession.isActive': true
    });

    res.json({
      success: true,
      data: {
        totalPremiumUsers,
        usersWithSelectedProfession,
        subscriptionStats: stats
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
router.post('/assign-tasks-to-user/:userId', auth, requireAdmin, async (req, res) => {
  try {
    const { userId } = req.params;
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const assignedCount = await TaskAssignmentService.assignTasksToUser(user);
    
    res.json({
      success: true,
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${assignedCount} –∑–∞–¥–∞—á`,
      data: { assignedCount }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/premium-users', auth, requireAdmin, async (req, res) => {
  try {
    const { page = 1, limit = 20 } = req.query;
    const skip = (page - 1) * limit;

    const users = await User.find({
      'subscription.type': { $ne: 'free' },
      'subscription.status': 'active'
    })
    .select('username email firstName lastName subscription selectedProfession taskSettings')
    .populate('selectedProfession.professionId', 'name slug')
    .sort({ 'subscription.startDate': -1 })
    .skip(skip)
    .limit(parseInt(limit));

    const total = await User.countDocuments({
      'subscription.type': { $ne: 'free' },
      'subscription.status': 'active'
    });

    res.json({
      success: true,
      data: users,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

module.exports = router;
