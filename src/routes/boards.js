const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const Board = require('../models/Board');

console.log('üìã boards.js: –†–æ—É—Ç—ã –¥–æ—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

// GET /api/v1/boards/ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', async (req, res) => {
  try {
    console.log('üìã GET /boards: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const userBoards = await Board.find({ isArchived: false }).sort({ createdAt: -1 });
    
    console.log('üìã GET /boards: –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å–æ–∫ –≤ MongoDB:', userBoards.length);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏
    const Task = require('../models/Task');
    const boardsWithTasks = await Promise.all(userBoards.map(async (board) => {
      console.log(`üìã GET /boards: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏ ${board.title} (${board._id})`);
      const tasks = await Task.find({ boardId: board._id });
      console.log(`üìã GET /boards: –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å–∫–∏ ${board.title}: ${tasks.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
      const tasksByColumn = {};
      tasks.forEach(task => {
        const columnId = task.columnId || 'new_tasks';
        if (!tasksByColumn[columnId]) {
          tasksByColumn[columnId] = [];
        }
        tasksByColumn[columnId].push({
          ...task.toObject(),
          id: task._id.toString()
        });
      });
      
      console.log(`üìã GET /boards: –ó–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º –¥–ª—è –¥–æ—Å–∫–∏ ${board.title}:`, Object.keys(tasksByColumn).map(colId => `${colId}: ${tasksByColumn[colId].length}`));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–∏
      const columnsWithTasks = board.columns.map(column => ({
        ...column.toObject(),
        tasks: tasksByColumn[column.id] || []
      }));
      
      return {
        ...board.toObject(),
        id: board._id.toString(),
        columns: columnsWithTasks
      };
    }));
    
    res.json({
      success: true,
      data: boardsWithTasks,
      message: '–î–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫',
      message: error.message
    });
  }
});

// GET /api/v1/boards/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üìã GET /boards/:id: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–∫–∏:', id);
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–æ—Å–∫–∏'
      });
    }
    
    const board = await Board.findById(id);
    
    if (!board) {
      return res.status(404).json({
        success: false,
        error: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    console.log('üìã GET /boards/:id: –î–æ—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∫–æ–ª–æ–Ω–æ–∫ –≤ –±–∞–∑–µ:', board.columns.length);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const boardWithId = {
      ...board.toObject(),
      id: board._id.toString()
    };
    
    console.log('üìã GET /boards/:id: –ö–æ–ª–æ–Ω–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ:', boardWithId.columns.length);
    
    res.json({
      success: true,
      data: boardWithId,
      message: '–î–æ—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏',
      message: error.message
    });
  }
});

// POST /api/v1/boards/ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
router.post('/', async (req, res) => {
  try {
    console.log('üìã POST /boards: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏');
    console.log('üìã POST /boards: Body:', req.body);
    
    // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
    const boardId = new mongoose.Types.ObjectId();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π boardId
    const processedColumns = (req.body.columns || []).map((column, index) => ({
      ...column,
      id: column.id || `col_${Date.now()}_${index}`,
      boardId: boardId,
      tasks: column.tasks || []
    }));
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const newBoardData = {
      _id: boardId,
      id: boardId.toString(), // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      title: req.body.title || '–ù–æ–≤–∞—è –¥–æ—Å–∫–∞',
      description: req.body.description || '',
      icon: req.body.icon || 'üìã',
      color: req.body.color || '#3B82F6',
      ownerId: req.body.ownerId || new mongoose.Types.ObjectId(),
      teamId: req.body.teamId || null,
      members: req.body.members || [],
      settings: req.body.settings || {
        allowMemberInvites: true,
        allowPublicView: false,
        allowComments: true,
        allowAttachments: true,
        allowTaskCreation: true,
        allowTaskEditing: true,
        defaultColumnTemplate: ['planning', 'in_progress', 'review', 'completed', 'overdue'],
        allowColumnCustomization: true,
        maxColumns: 10,
        allowSubtaskCreation: true,
        allowTaskAssignment: true,
        allowDueDateSetting: true,
        allowPrioritySetting: true,
        allowTagging: true,
        autoArchiveCompleted: false,
        archiveAfterDays: 30,
        autoAssignTasks: false,
        autoNotifyAssignees: true,
        emailNotifications: true,
        pushNotifications: true,
        desktopNotifications: true,
        showTaskDetails: 'all',
        showMemberActivity: true,
        showTaskHistory: true
      },
      statistics: req.body.statistics || {
        totalTasks: 0,
        completedTasks: 0,
        inProgressTasks: 0,
        overdueTasks: 0,
        totalMembers: 1,
        activeMembers: 1,
        lastActivity: Date.now(),
        completionRate: 0,
        averageTaskDuration: 0,
        totalComments: 0,
        totalAttachments: 0
      },
      columns: processedColumns,
      isArchived: req.body.isArchived || false,
      isPublic: req.body.isPublic || false,
      isTemplate: req.body.isTemplate || false,
      isFavorite: req.body.isFavorite || false,
      createdAt: Date.now(),
      updatedAt: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å–∫—É –≤ MongoDB
    console.log('üìã POST /boards: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å–∫—É —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:', processedColumns.length);
    console.log('üìã POST /boards: –î–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–æ–∫:', JSON.stringify(processedColumns, null, 2));
    const newBoard = new Board(newBoardData);
    
    let savedBoard;
    try {
      savedBoard = await newBoard.save();
      console.log('üìã POST /boards: –î–æ—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –¥–æ—Å–∫–µ:', savedBoard.columns.length);
    } catch (saveError) {
      console.error('üìã POST /boards: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å–∫–∏:', saveError);
      throw saveError;
    }
    
    console.log('üìã POST /boards: –î–æ—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB:', savedBoard.title, 'ID:', savedBoard._id);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const boardWithId = {
      ...savedBoard.toObject(),
      id: savedBoard._id.toString()
    };
    
    res.json({
      success: true,
      data: boardWithId,
      message: '–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏',
      message: error.message
    });
  }
});

// DELETE /api/v1/boards/:id - —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
router.delete('/:id', async (req, res) => {
  try {
    console.log('üóëÔ∏è DELETE /boards/:id: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏');
    console.log('üóëÔ∏è DELETE /boards/:id: Board ID:', req.params.id);
    console.log('üóëÔ∏è DELETE /boards/:id: Full URL:', req.originalUrl);
    console.log('üóëÔ∏è DELETE /boards/:id: Method:', req.method);
    
    const boardId = req.params.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –≤–∞–ª–∏–¥–Ω—ã–π ObjectId
    if (!mongoose.Types.ObjectId.isValid(boardId)) {
      console.log('üóëÔ∏è DELETE /boards/:id: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –¥–æ—Å–∫–∏:', boardId);
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –¥–æ—Å–∫–∏',
        message: 'ID –¥–æ—Å–∫–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ—Å–∫–∞
    const board = await Board.findById(boardId);
    if (!board) {
      console.log('üóëÔ∏è DELETE /boards/:id: –î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return res.status(404).json({
        success: false,
        error: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        message: '–î–æ—Å–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
    }
    
    // –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫—É –∏–∑ MongoDB
    await Board.findByIdAndDelete(boardId);
    
    console.log('üóëÔ∏è DELETE /boards/:id: –î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:', board.title);
    
    res.json({
      success: true,
      message: '–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏',
      message: error.message
    });
  }
});

// GET /api/v1/boards/:boardId/tasks - –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏
router.get('/:boardId/tasks', async (req, res) => {
  try {
    const { boardId } = req.params;
    console.log('üìã GET /boards/:boardId/tasks: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏:', boardId);
    
    if (!mongoose.Types.ObjectId.isValid(boardId)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–æ—Å–∫–∏'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å–∫—É
    const board = await Board.findById(boardId);
    if (!board) {
      return res.status(404).json({
        success: false,
        error: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏
    const Task = require('../models/Task');
    const tasks = await Task.find({ boardId: boardId });
    
    console.log('üìã GET /boards/:boardId/tasks: –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:', tasks.length);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const tasksWithId = tasks.map(task => ({
      ...task.toObject(),
      id: task._id.toString()
    }));
    
    res.json({
      success: true,
      data: tasksWithId,
      message: '–ó–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–æ—Å–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–æ—Å–∫–∏',
      message: error.message
    });
  }
});

// POST /api/v1/boards/:boardId/columns - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
router.post('/:boardId/columns', async (req, res) => {
  try {
    const { boardId } = req.params;
    console.log('üìã POST /boards/:boardId/columns: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏:', boardId);
    console.log('üìã POST /boards/:boardId/columns: Body:', req.body);
    
    if (!mongoose.Types.ObjectId.isValid(boardId)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–æ—Å–∫–∏'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å–∫—É
    const board = await Board.findById(boardId);
    if (!board) {
      return res.status(404).json({
        success: false,
        error: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    const columnId = `col_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    const columnData = {
      id: columnId,
      boardId: boardId,
      title: req.body.title,
      description: req.body.description || '',
      icon: req.body.icon || 'üìã',
      color: req.body.color || '#6B7280',
      order: board.columns.length,
      isLocked: false,
      isCollapsed: false,
      isStandard: false,
      tasks: [],
      settings: {
        allowTaskCreation: true,
        allowTaskEditing: true,
        allowTaskMoving: true,
        allowTaskDeletion: true,
        allowSubtaskCreation: true,
        allowCommentCreation: true,
        allowAttachmentUpload: true,
        autoSortTasks: false,
        sortBy: 'order',
        sortDirection: 'asc'
      },
      statistics: {
        totalTasks: 0,
        completedTasks: 0,
        inProgressTasks: 0,
        overdueTasks: 0,
        averageTaskDuration: 0,
        totalComments: 0,
        totalAttachments: 0,
        lastTaskUpdate: Date.now()
      },
      createdAt: Date.now(),
      updatedAt: Date.now()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –¥–æ—Å–∫—É
    board.columns.push(columnData);
    await board.save();
    
    console.log('üìã POST /boards/:boardId/columns: –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', columnId);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const boardWithId = {
      ...board.toObject(),
      id: board._id.toString()
    };
    
    res.status(201).json({
      success: true,
      data: boardWithId,
      message: '–ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏',
      message: error.message
    });
  }
});

// PUT /api/v1/boards/:boardId/columns/:columnId - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
router.put('/:boardId/columns/:columnId', async (req, res) => {
  try {
    const { boardId, columnId } = req.params;
    console.log('üìã PUT /boards/:boardId/columns/:columnId: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', columnId);
    
    if (!mongoose.Types.ObjectId.isValid(boardId)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–æ—Å–∫–∏'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å–∫—É
    const board = await Board.findById(boardId);
    if (!board) {
      return res.status(404).json({
        success: false,
        error: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É
    const column = board.columns.id(columnId);
    if (!column) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    Object.assign(column, {
      ...req.body,
      updatedAt: Date.now()
    });
    
    await board.save();
    
    console.log('üìã PUT /boards/:boardId/columns/:columnId: –ö–æ–ª–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', columnId);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const boardWithId = {
      ...board.toObject(),
      id: board._id.toString()
    };
    
    res.json({
      success: true,
      data: boardWithId,
      message: '–ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏',
      message: error.message
    });
  }
});

// DELETE /api/v1/boards/:boardId/columns/:columnId - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
router.delete('/:boardId/columns/:columnId', async (req, res) => {
  try {
    const { boardId, columnId } = req.params;
    console.log('üìã DELETE /boards/:boardId/columns/:columnId: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', columnId);
    
    if (!mongoose.Types.ObjectId.isValid(boardId)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–æ—Å–∫–∏'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å–∫—É
    const board = await Board.findById(boardId);
    if (!board) {
      return res.status(404).json({
        success: false,
        error: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É
    const column = board.columns.id(columnId);
    if (!column) {
      return res.status(404).json({
        success: false,
        error: '–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π
    if (column.isStandard) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É'
      });
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    board.columns.pull(columnId);
    await board.save();
    
    console.log('üìã DELETE /boards/:boardId/columns/:columnId: –ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', columnId);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const boardWithId = {
      ...board.toObject(),
      id: board._id.toString()
    };
    
    res.json({
      success: true,
      data: boardWithId,
      message: '–ö–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏',
      message: error.message
    });
  }
});

module.exports = router;
