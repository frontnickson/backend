const express = require('express');
const router = express.Router();
const Profession = require('../models/Profession');
const ProfessionTask = require('../models/ProfessionTask');
const { authenticate: auth } = require('../middleware/auth');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
router.get('/', async (req, res) => {
  try {
    const { category, level, featured, limit = 50, page = 1 } = req.query;
    
    const filter = { isActive: true, isPublic: true };
    
    if (category) filter.category = category;
    if (level) filter.level = level;
    if (featured === 'true') filter.isFeatured = true;
    
    const skip = (page - 1) * limit;
    
    const professions = await Profession.find(filter)
      .populate('createdBy', 'username firstName lastName')
      .sort({ 'statistics.popularity': -1, createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));
    
    const total = await Profession.countDocuments(filter);
    
    res.json({
      success: true,
      data: professions,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ slug
router.get('/:slug', async (req, res) => {
  try {
    const profession = await Profession.findOne({ 
      slug: req.params.slug, 
      isActive: true, 
      isPublic: true 
    }).populate('createdBy', 'username firstName lastName');
    
    if (!profession) {
      return res.status(404).json({
        success: false,
        message: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      data: profession
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
router.get('/:slug/tasks', async (req, res) => {
  try {
    const { category, difficulty, level, type, limit = 50, page = 1 } = req.query;
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    const profession = await Profession.findOne({ 
      slug: req.params.slug, 
      isActive: true, 
      isPublic: true 
    });
    
    if (!profession) {
      return res.status(404).json({
        success: false,
        message: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const filter = { 
      professionId: profession._id, 
      isActive: true, 
      isPublic: true 
    };
    
    if (category) filter.category = category;
    if (difficulty) filter.difficulty = difficulty;
    if (level) filter.level = parseInt(level);
    if (type) filter.type = type;
    
    const skip = (page - 1) * limit;
    
    const tasks = await ProfessionTask.find(filter)
      .populate('createdBy', 'username firstName lastName')
      .sort({ order: 1, level: 1, createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));
    
    const total = await ProfessionTask.countDocuments(filter);
    
    res.json({
      success: true,
      data: tasks,
      profession: {
        id: profession._id,
        name: profession.name,
        slug: profession.slug
      },
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
router.get('/:slug/tasks/:taskId', async (req, res) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    const profession = await Profession.findOne({ 
      slug: req.params.slug, 
      isActive: true, 
      isPublic: true 
    });
    
    if (!profession) {
      return res.status(404).json({
        success: false,
        message: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const task = await ProfessionTask.findOne({
      _id: req.params.taskId,
      professionId: profession._id,
      isActive: true,
      isPublic: true
    }).populate('createdBy', 'username firstName lastName');
    
    if (!task) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    res.json({
      success: true,
      data: task,
      profession: {
        id: profession._id,
        name: profession.name,
        slug: profession.slug
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
router.get('/categories/list', async (req, res) => {
  try {
    const categories = await Profession.distinct('category', { isActive: true, isPublic: true });
    
    const categoryInfo = {
      design: { name: '–î–∏–∑–∞–π–Ω', icon: 'üé®', description: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, UI/UX, –±—Ä–µ–Ω–¥–∏–Ω–≥' },
      development: { name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', icon: 'üíª', description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
      marketing: { name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', icon: 'üìà', description: 'SMM, –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Ä–µ–∫–ª–∞–º–∞' },
      management: { name: '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', icon: 'üë•', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∫–æ–º–∞–Ω–¥–∞–º–∏' },
      sales: { name: '–ü—Ä–æ–¥–∞–∂–∏', icon: 'üí∞', description: '–ü—Ä–æ–¥–∞–∂–∏, —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏' },
      support: { name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', icon: 'üõ†Ô∏è', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ' },
      other: { name: '–î—Ä—É–≥–æ–µ', icon: 'üîß', description: '–ü—Ä–æ—á–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏' }
    };
    
    const result = categories.map(category => ({
      value: category,
      ...categoryInfo[category] || { name: category, icon: 'üîß', description: '' }
    }));
    
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á
router.get('/tasks/difficulties', async (req, res) => {
  try {
    const difficulties = [
      { value: 'beginner', name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', level: 1, description: '–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤' },
      { value: 'intermediate', name: '–°—Ä–µ–¥–Ω–∏–π', level: 3, description: '–ó–∞–¥–∞—á–∏ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏' },
      { value: 'advanced', name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', level: 6, description: '–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤' },
      { value: 'expert', name: '–≠–∫—Å–ø–µ—Ä—Ç', level: 9, description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è' }
    ];
    
    res.json({
      success: true,
      data: difficulties
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
router.get('/tasks/categories', async (req, res) => {
  try {
    const categories = [
      { value: 'social_media', name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', icon: 'üì±', description: '–ü–æ—Å—Ç—ã, —Å—Ç–æ—Ä–∏—Å, –æ–±–ª–æ–∂–∫–∏ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π' },
      { value: 'print_design', name: '–ü–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è', icon: 'üìÑ', description: '–í–∏–∑–∏—Ç–∫–∏, –±—É–∫–ª–µ—Ç—ã, –ø–ª–∞–∫–∞—Ç—ã' },
      { value: 'web_design', name: '–í–µ–±-–¥–∏–∑–∞–π–Ω', icon: 'üåê', description: '–õ–µ–Ω–¥–∏–Ω–≥–∏, —Å–∞–π—Ç—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã' },
      { value: 'branding', name: '–ë—Ä–µ–Ω–¥–∏–Ω–≥', icon: 'üè∑Ô∏è', description: '–õ–æ–≥–æ—Ç–∏–ø—ã, —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å' },
      { value: 'ui_ux', name: 'UI/UX', icon: 'üéØ', description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã' },
      { value: 'illustration', name: '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', icon: 'üé®', description: '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –∏–∫–æ–Ω–∫–∏, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã' },
      { value: 'photography', name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', icon: 'üì∏', description: '–§–æ—Ç–æ—Å—ä–µ–º–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' },
      { value: 'video', name: '–í–∏–¥–µ–æ', icon: 'üé¨', description: '–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏, –∞–Ω–∏–º–∞—Ü–∏–∏' },
      { value: 'animation', name: '–ê–Ω–∏–º–∞—Ü–∏—è', icon: '‚ú®', description: '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, GIF' },
      { value: 'packaging', name: '–£–ø–∞–∫–æ–≤–∫–∞', icon: 'üì¶', description: '–î–∏–∑–∞–π–Ω —É–ø–∞–∫–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' },
      { value: 'presentation', name: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', icon: 'üìä', description: '–°–ª–∞–π–¥—ã, –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞' },
      { value: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üîß', description: '–ü—Ä–æ—á–∏–µ –∑–∞–¥–∞—á–∏' }
    ];
    
    res.json({
      success: true,
      data: categories
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/', auth, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin' && req.user.role !== 'superuser') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'
      });
    }
    
    const professionData = {
      ...req.body,
      createdBy: req.user.id,
      updatedBy: req.user.id
    };
    
    const profession = new Profession(professionData);
    await profession.save();
    
    res.status(201).json({
      success: true,
      data: profession,
      message: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/:slug/tasks', auth, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.user.role !== 'admin' && req.user.role !== 'superuser') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    const profession = await Profession.findOne({ 
      slug: req.params.slug, 
      isActive: true 
    });
    
    if (!profession) {
      return res.status(404).json({
        success: false,
        message: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const taskData = {
      ...req.body,
      professionId: profession._id,
      createdBy: req.user.id,
      updatedBy: req.user.id
    };
    
    const task = new ProfessionTask(taskData);
    await task.save();
    
    res.status(201).json({
      success: true,
      data: task,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

module.exports = router;
