const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const Task = require('../models/Task');
const Board = require('../models/Board');

console.log('üìù tasks.js: –†–æ—É—Ç—ã –∑–∞–¥–∞—á –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

// GET /api/v1/tasks/ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', async (req, res) => {
  try {
    console.log('üìù GET /tasks: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    // TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const userTasks = await Task.find().sort({ createdAt: -1 });
    
    console.log('üìù GET /tasks: –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ MongoDB:', userTasks.length);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const tasksWithId = userTasks.map(task => ({
      ...task.toObject(),
      id: task._id.toString()
    }));
    
    res.json({
      success: true,
      data: tasksWithId,
      message: '–ó–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á',
      message: error.message
    });
  }
});

// GET /api/v1/tasks/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üìù GET /tasks/:id: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', id);
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏'
      });
    }
    
    const task = await Task.findById(id);
    
    if (!task) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const taskWithId = {
      ...task.toObject(),
      id: task._id.toString()
    };
    
    res.json({
      success: true,
      data: taskWithId,
      message: '–ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
      message: error.message
    });
  }
});

// POST /api/v1/tasks/ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
router.post('/', async (req, res) => {
  try {
    console.log('üìù POST /tasks: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    console.log('üìù POST /tasks: Body:', req.body);
    
    // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const taskId = new mongoose.Types.ObjectId();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const taskData = {
      _id: taskId,
      id: taskId.toString(),
      order: req.body.order || 0,
      createdBy: req.body.createdBy ? new mongoose.Types.ObjectId(req.body.createdBy) : (req.body.reporterId ? new mongoose.Types.ObjectId(req.body.reporterId) : new mongoose.Types.ObjectId()),
      updatedBy: req.body.updatedBy ? new mongoose.Types.ObjectId(req.body.updatedBy) : (req.body.reporterId ? new mongoose.Types.ObjectId(req.body.reporterId) : new mongoose.Types.ObjectId()),
      createdAt: Date.now(),
      updatedAt: Date.now(),
      ...req.body
    };
    
    console.log('üìù POST /tasks: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
    console.log('üìù POST /tasks: createdBy:', taskData.createdBy);
    console.log('üìù POST /tasks: updatedBy:', taskData.updatedBy);
    console.log('üìù POST /tasks: order:', taskData.order);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    const newTask = new Task(taskData);
    await newTask.save();
    
    console.log('üìù POST /tasks: –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', taskId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å–∫–∏
    if (req.body.boardId) {
      await Board.findByIdAndUpdate(
        req.body.boardId,
        { $inc: { 'statistics.totalTasks': 1 } }
      );
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const taskWithId = {
      ...newTask.toObject(),
      id: newTask._id.toString()
    };
    
    res.status(201).json({
      success: true,
      data: taskWithId,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏',
      message: error.message
    });
  }
});

// PUT /api/v1/tasks/:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üìù PUT /tasks/:id: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', id);
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏'
      });
    }
    
    const updateData = {
      ...req.body,
      updatedAt: new Date()
    };
    
    const updatedTask = await Task.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );
    
    if (!updatedTask) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    console.log('üìù PUT /tasks/:id: –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', id);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º _id –≤ id –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const taskWithId = {
      ...updatedTask.toObject(),
      id: updatedTask._id.toString()
    };
    
    res.json({
      success: true,
      data: taskWithId,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
      message: error.message
    });
  }
});

// DELETE /api/v1/tasks/:id - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üìù DELETE /tasks/:id: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', id);
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏'
      });
    }
    
    const deletedTask = await Task.findByIdAndDelete(id);
    
    if (!deletedTask) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    console.log('üìù DELETE /tasks/:id: –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:', id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å–∫–∏
    if (deletedTask.boardId) {
      await Board.findByIdAndUpdate(
        deletedTask.boardId,
        { $inc: { 'statistics.totalTasks': -1 } }
      );
    }
    
    res.json({
      success: true,
      message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏',
      message: error.message
    });
  }
});

module.exports = router;
