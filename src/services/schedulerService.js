const cron = require('cron');
const TaskAssignmentService = require('./taskAssignmentService');

class SchedulerService {
  constructor() {
    this.jobs = new Map();
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
   */
  start() {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∑–∞–¥–∞—á...');
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    this.scheduleTaskAssignment();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–π —á–∞—Å
    this.scheduleCompletedTasksCheck();
    
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
   */
  stop() {
    console.log('‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤...');
    
    this.jobs.forEach((job, name) => {
      job.stop();
      console.log(`üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ "${name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    });
    
    this.jobs.clear();
    console.log('‚úÖ –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á
   */
  scheduleTaskAssignment() {
    const job = new cron.CronJob('0 9 * * *', async () => {
      console.log('üïò 9:00 - –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
      try {
        const result = await TaskAssignmentService.assignTasksToPremiumUsers();
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${result.assignedTasks} –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–æ`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
      }
    }, null, true, 'Europe/Moscow');

    this.jobs.set('taskAssignment', job);
    console.log('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00');
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  scheduleCompletedTasksCheck() {
    const job = new cron.CronJob('0 * * * *', async () => {
      console.log('üïê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...');
      try {
        await TaskAssignmentService.checkCompletedTasks();
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      }
    }, null, true, 'Europe/Moscow');

    this.jobs.set('completedTasksCheck', job);
    console.log('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: –∫–∞–∂–¥—ã–π —á–∞—Å');
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async runTaskAssignmentNow() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...');
    try {
      const result = await TaskAssignmentService.assignTasksToPremiumUsers();
      console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${result.assignedTasks} –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–æ`);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async runCompletedTasksCheckNow() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...');
    try {
      await TaskAssignmentService.checkCompletedTasks();
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
   */
  getStatus() {
    const status = {};
    this.jobs.forEach((job, name) => {
      status[name] = {
        running: job.running,
        scheduled: job.scheduled
      };
    });
    return status;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const schedulerService = new SchedulerService();

module.exports = schedulerService;
