const User = require('../models/User');
const Profession = require('../models/Profession');
const ProfessionTask = require('../models/ProfessionTask');
const Task = require('../models/Task');
const Board = require('../models/Board');

class TaskAssignmentService {
  /**
   * –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  static async assignTasksToPremiumUsers() {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏
      const premiumUsers = await User.find({
        'subscription.type': { $ne: 'free' },
        'subscription.status': 'active',
        'selectedProfession.isActive': true,
        'taskSettings.dailyTaskLimit': { $gt: 0 }
      }).populate('selectedProfession.professionId');

      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${premiumUsers.length} –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      let totalAssigned = 0;

      for (const user of premiumUsers) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è
          if (!user.shouldReceiveTasks()) {
            console.log(`‚è≠Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É–∂–µ –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è`);
            continue;
          }

          // –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const assignedCount = await this.assignTasksToUser(user);
          totalAssigned += assignedCount;
          
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${assignedCount} –∑–∞–¥–∞—á`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}:`, error);
        }
      }

      console.log(`üéâ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${totalAssigned} –∑–∞–¥–∞—á`);
      return { success: true, assignedTasks: totalAssigned };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ assignTasksToPremiumUsers:', error);
      throw error;
    }
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  static async assignTasksToUser(user) {
    try {
      const professionId = user.selectedProfession.professionId._id;
      const dailyLimit = user.taskSettings.dailyTaskLimit;
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const filter = {
        professionId,
        isActive: true,
        isPublic: true
      };

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      if (user.taskSettings.taskDifficulty !== 'all') {
        filter.difficulty = user.taskSettings.taskDifficulty;
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
      if (user.taskSettings.taskCategories.length > 0) {
        filter.category = { $in: user.taskSettings.taskCategories };
      }

      // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      const existingTasks = await Task.find({
        boardId: { $exists: true },
        'customFields.professionTaskId': { $exists: true }
      }).select('customFields.professionTaskId');

      const assignedProfessionTaskIds = existingTasks
        .map(task => task.customFields?.professionTaskId)
        .filter(Boolean);

      if (assignedProfessionTaskIds.length > 0) {
        filter._id = { $nin: assignedProfessionTaskIds };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      const availableTasks = await ProfessionTask.find(filter)
        .sort({ level: 1, order: 1 })
        .limit(dailyLimit);

      if (availableTasks.length === 0) {
        console.log(`‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}`);
        return 0;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
      let userBoard = await Board.findOne({
        ownerId: user._id,
        'customFields.type': 'profession_tasks'
      });

      if (!userBoard) {
        userBoard = await this.createProfessionTasksBoard(user, professionId);
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é" –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—ë
      let todoColumn = userBoard.columns.find(col => col.name === '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é');
      if (!todoColumn) {
        todoColumn = {
          id: 'todo',
          name: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
          order: 0,
          color: '#3498db'
        };
        userBoard.columns.push(todoColumn);
        await userBoard.save();
      }

      let assignedCount = 0;

      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –¥–æ—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const professionTask of availableTasks) {
        try {
          const task = new Task({
            boardId: userBoard._id,
            columnId: todoColumn.id,
            title: professionTask.title,
            description: professionTask.description,
            status: 'planning',
            priority: this.mapDifficultyToPriority(professionTask.difficulty),
            type: 'task',
            assigneeId: user._id,
            reporterId: user._id,
            dueDate: Date.now() + (professionTask.deadline * 24 * 60 * 60 * 1000),
            estimatedHours: professionTask.estimatedTime,
            tags: professionTask.tags.map(tag => ({
              id: require('crypto').randomUUID(),
              name: tag,
              color: this.getTagColor(tag),
              createdBy: user._id
            })),
            customFields: {
              professionTaskId: professionTask._id,
              professionSlug: user.selectedProfession.professionSlug,
              taskCategory: professionTask.category,
              taskDifficulty: professionTask.difficulty,
              isAutoAssigned: true,
              assignedAt: new Date()
            },
            createdBy: user._id,
            updatedBy: user._id,
            order: await this.getNextOrder(userBoard._id, todoColumn.id)
          });

          await task.save();
          assignedCount++;

          console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${professionTask.title}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ${professionTask.title}:`, error);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.taskSettings.lastTaskAssignment = new Date();
      await user.save();

      return assignedCount;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ assignTasksToUser:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
   */
  static async createProfessionTasksBoard(user, professionId) {
    const profession = await Profession.findById(professionId);
    
    const board = new Board({
      name: `–ó–∞–¥–∞—á–∏: ${profession.name}`,
      description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession.name}"`,
      ownerId: user._id,
      isPublic: false,
      columns: [
        { id: 'todo', name: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', order: 0, color: '#3498db' },
        { id: 'in_progress', name: '–í —Ä–∞–±–æ—Ç–µ', order: 1, color: '#f39c12' },
        { id: 'review', name: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', order: 2, color: '#9b59b6' },
        { id: 'completed', name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', order: 3, color: '#27ae60' }
      ],
      customFields: {
        type: 'profession_tasks',
        professionId: professionId,
        professionSlug: profession.slug
      },
      createdBy: user._id,
      updatedBy: user._id
    });

    await board.save();
    console.log(`üìã –°–æ–∑–¥–∞–Ω–∞ –¥–æ—Å–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: ${board.name}`);
    return board;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  static async getNextOrder(boardId, columnId) {
    const lastTask = await Task.findOne({ boardId, columnId })
      .sort({ order: -1 })
      .select('order');
    
    return lastTask ? lastTask.order + 1 : 0;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   */
  static mapDifficultyToPriority(difficulty) {
    const mapping = {
      'beginner': 'low',
      'intermediate': 'medium',
      'advanced': 'high',
      'expert': 'urgent'
    };
    return mapping[difficulty] || 'medium';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞
   */
  static getTagColor(tag) {
    const colors = [
      '#e74c3c', '#3498db', '#2ecc71', '#f39c12', '#9b59b6',
      '#1abc9c', '#34495e', '#e67e22', '#95a5a6', '#f1c40f'
    ];
    const hash = tag.split('').reduce((a, b) => a + b.charCodeAt(0), 0);
    return colors[hash % colors.length];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—ã–µ
   */
  static async checkCompletedTasks() {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏...');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
      const completedTasks = await Task.find({
        status: 'completed',
        'customFields.professionTaskId': { $exists: true },
        'customFields.isAutoAssigned': true
      }).populate('boardId');

      for (const task of completedTasks) {
        try {
          const user = await User.findById(task.assigneeId);
          if (user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user.completeTask();
            
            // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –¥–æ—Å–∫–∏ (–∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∞—Ä—Ö–∏–≤)
            task.isArchived = true;
            await task.save();
            
            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.username}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ ${task._id}:`, error);
        }
      }

      // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–¥–∞—á–∏
      await this.assignTasksToPremiumUsers();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkCompletedTasks:', error);
      throw error;
    }
  }
}

module.exports = TaskAssignmentService;
