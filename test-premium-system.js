// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–º–∏—É–º –∑–∞–¥–∞—á
const mongoose = require('mongoose');
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/toolrole');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const User = require('./src/models/User');
const Profession = require('./src/models/Profession');
const ProfessionTask = require('./src/models/ProfessionTask');
const Task = require('./src/models/Task');
const Board = require('./src/models/Board');

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
const demonstrateSystem = async () => {
  try {
    console.log('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–†–ï–ú–ò–£–ú –ó–ê–î–ê–ß\n');

    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ü–†–ï–ú–ò–£–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
    const premiumUsers = await User.find({
      'subscription.type': { $ne: 'free' },
      'subscription.status': 'active'
    }).populate('selectedProfession.professionId');

    premiumUsers.forEach((user, index) => {
      console.log(`\n${index + 1}. ${user.firstName} ${user.lastName} (${user.username})`);
      console.log(`   üìß Email: ${user.email}`);
      console.log(`   üíé –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscription.type.toUpperCase()}`);
      console.log(`   üìä –õ–∏–º–∏—Ç –∑–∞–¥–∞—á: ${user.taskSettings.dailyTaskLimit}/–¥–µ–Ω—å`);
      console.log(`   üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${user.selectedProfession.professionId?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
      console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.taskSettings.completedTasksCount}`);
      console.log(`   üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: ${user.taskSettings.streakDays}`);
      console.log(`   üéØ –ú–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏: ${user.canReceiveTasks ? '–î–∞' : '–ù–µ—Ç'}`);
    });

    // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    console.log('\nüé® –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–§–ï–°–°–ò–ò:');
    const professions = await Profession.find({ isActive: true, isPublic: true });
    professions.forEach((profession, index) => {
      console.log(`${index + 1}. ${profession.name} (${profession.slug})`);
      console.log(`   üìù ${profession.description}`);
      console.log(`   üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${profession.category}`);
      console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${profession.statistics.totalTasks}`);
    });

    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞
    console.log('\nüìã –ó–ê–î–ê–ß–ò –î–õ–Ø –ì–†–ê–§–ò–ß–ï–°–ö–û–ì–û –î–ò–ó–ê–ô–ù–ï–†–ê:');
    const designerProfession = await Profession.findOne({ slug: 'graphic-designer' });
    if (designerProfession) {
      const tasks = await ProfessionTask.find({
        professionId: designerProfession._id,
        isActive: true,
        isPublic: true
      }).limit(5);

      tasks.forEach((task, index) => {
        console.log(`\n${index + 1}. ${task.title}`);
        console.log(`   üìù ${task.shortDescription}`);
        console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${task.estimatedTime} ${task.timeUnit}`);
        console.log(`   üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${task.difficulty} (${task.level}/10)`);
        console.log(`   üè¢ –ö–ª–∏–µ–Ω—Ç: ${task.client.name} (${task.client.industry})`);
        console.log(`   üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${task.category}`);
        console.log(`   üè∑Ô∏è  –¢–µ–≥–∏: ${task.tags.join(', ')}`);
      });
    }

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –î–û–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
    const userBoards = await Board.find({
      'customFields.type': 'profession_tasks'
    }).populate('ownerId', 'username firstName lastName');

    userBoards.forEach((board, index) => {
      console.log(`\n${index + 1}. ${board.name}`);
      console.log(`   üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${board.ownerId.firstName} ${board.ownerId.lastName} (${board.ownerId.username})`);
      console.log(`   üìä –ö–æ–ª–æ–Ω–æ–∫: ${board.columns.length}`);
      console.log(`   üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${board.customFields.professionSlug}`);
      console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(board.createdAt).toLocaleDateString()}`);
    });

    // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –¥–æ—Å–∫–∞—Ö
    console.log('\nüìù –ó–ê–î–ê–ß–ò –í –î–û–°–ö–ê–•:');
    const boardTasks = await Task.find({
      'customFields.professionTaskId': { $exists: true },
      'customFields.isAutoAssigned': true
    }).populate('boardId', 'name').populate('assigneeId', 'username firstName lastName');

    boardTasks.forEach((task, index) => {
      console.log(`\n${index + 1}. ${task.title}`);
      console.log(`   üìã –î–æ—Å–∫–∞: ${task.boardId.name}`);
      console.log(`   üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assigneeId.firstName} ${task.assigneeId.lastName} (${task.assigneeId.username})`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${task.status}`);
      console.log(`   üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}`);
      console.log(`   ‚è∞ –î–µ–¥–ª–∞–π–Ω: ${task.dueDate ? new Date(task.dueDate).toLocaleDateString() : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`   üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${task.customFields.taskCategory}`);
      console.log(`   üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${task.customFields.taskDifficulty}`);
    });

    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:');
    const totalUsers = await User.countDocuments();
    const premiumUsersCount = await User.countDocuments({
      'subscription.type': { $ne: 'free' },
      'subscription.status': 'active'
    });
    const usersWithProfession = await User.countDocuments({
      'selectedProfession.isActive': true
    });
    const totalTasks = await Task.countDocuments({
      'customFields.professionTaskId': { $exists: true }
    });
    const completedTasks = await Task.countDocuments({
      'customFields.professionTaskId': { $exists: true },
      status: 'completed'
    });

    console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${premiumUsersCount}`);
    console.log(`üé® –° –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π: ${usersWithProfession}`);
    console.log(`üìù –í—Å–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${totalTasks}`);
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${completedTasks}`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0}%`);

    console.log('\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('\nüí° –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï:');
    console.log('   ‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('   ‚Ä¢ –ó–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –≤ 9:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å');
    console.log('   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å');
    console.log('   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏');
    console.log('   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    await connectDB();
    await demonstrateSystem();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
